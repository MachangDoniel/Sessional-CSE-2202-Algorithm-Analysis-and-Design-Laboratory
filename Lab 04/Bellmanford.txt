#include <iostream>
#include <bits/stdc++.h>
using namespace std;
vector<int>dist(5), par(5);
int printPath(int n){
    if(n == 0){  //src = 0
        cout<<n<<" ";
        return 0;
    }
    printPath(par[n]);
    cout<<n<<" ";
}

int main()
{
    int node, edge;
    vector<vector<pair <int, int> > > graph;
    cin>>node>>edge;

    graph.assign(node, vector<pair<int,int>>());

    int a,b,w;
    for(int i=0; i<edge; i++)
    {
        cin>>a>>b>>w;
        graph[a].push_back({b,w});
        //graph[b].push_back({a,w});
    }

//    for(auto i:graph){
//        for(auto j:i){
//            cout<<j.first<<" "<<j.second<<endl;
//        }
//        cout<<endl;
//    }

    for(int i=0; i<node; i++)dist[i]=INT_MAX, par[i] = -1;
    int src = 0;
    dist[src] = 0;
    par[src] = src;

    for(int i=0; i<node-1; i++)
    {
        for(int u=0; u<node; u++)
        {
            for(int j=0; j<graph[u].size(); j++)
            {
                pair<int,int> d = graph[u][j];
                if(dist[u] == INT_MAX) continue;
                if(dist[d.first] > dist[u] + d.second)
                {
                    dist[d.first] = dist[u] + d.second;
                    par[d.first] = u;
                }
            }
        }
    }

    bool hascycle=false;
    for(int u=0; u<node; u++)
    {
        for(int j=0; j<graph[u].size(); j++)
        {
            pair<int,int> d = graph[u][j];
            if(dist[u] == INT_MAX) continue;
            if(dist[d.first] > dist[u] + d.second)
            {
                hascycle = true;
            }
        }
    }



    if(hascycle)
    {
        cout<<"Cycle exist"<<endl;
    }
    else
    {
        printPath(4);
        cout<<endl;

        for(int i=0; i<node; i++)
        {
            cout<<i<<" \t"<<dist[i]<<endl;
        }
    }



}
//cycle

//5 10
//0 1 -1
//0 2 2
//0 3 4
//1 0 2
//1 2 1
//2 3 5
//2 4 1
//3 2 1
//4 3 4
//4 1 -3

//5 10
//0 1 -1
//0 2 2
//0 3 4
//1 0 2
//1 2 3
//2 3 5
//2 4 3
//3 2 1
//4 3 4
//4 1 -3

//5 6
//0 1 5
//0 3 2
//1 2 6
//1 3 1
//3 4 3
//2 4 2
